%h1 Installing RVM

%p
  There are three very different ways to use RVM.

%ul
  %li As a User
  %li As Root (be *very* sure you know what you are doing... - like user, but into /usr/local/rvm)
  %li System Wide (Multiple Users, Installed via Root).

%p
  If you wish to install rvm system wide, please read our
  %a{:href => "/deployment/system-wide/"} system-wide installation guide
  which takes a slightly different approach to the method
  highlighted below.

%p
  Don't forget to set your
  %a{:href => "/rubies/default/"} default ruby
  after you install so that your command line opens with ruby enabled.
  
%p
  %strong Install not working?
  Please ensure you've read the troubleshooting notes at the bottom of this page.
  Namely, you need to
  %em ensure
  returns in your shell profiles are converted to ifs.
  
%p
  There are at least 3 ways to install RVM.
  
%h3 1. GitHub Repository (recommended)

%p
  To install / update from the github repository (recommended):

= sh_cmd "bash <(curl http://rvm.beginrescueend.com/releases/rvm-install-head)"

%p
  Or, alternatively, if you want to inspect the script during the process:
  
= sh_cmd "curl -O http://rvm.beginrescueend.com/releases/rvm-install-head && bash ./rvm-install-head"


%p
  Please note that if you want to let rvm attempt to automatically add the shell command, you'd instead
  pass the --auto flag as such:
  
= sh_cmd "bash <(curl http://rvm.beginrescueend.com/releases/rvm-install-head) --auto"

%p
  What this script essentially does is the following, with some extra checks and tweaks:
%pre.code
  :preserve
    mkdir -p ~/.rvm/src/ &amp;&amp; cd ~/.rvm/src &amp;&amp; rm -rf ./rvm/ &amp;&amp; git clone --depth 1 git://github.com/wayneeseguin/rvm.git &amp;&amp; cd rvm &amp;&amp; ./install
%p
  Note that if you are behind a firewall (slower, but it should work), change the git:// to http:// like this:
%pre.code
  :preserve
    mkdir -p ~/.rvm/src/ &amp;&amp; cd ~/.rvm/src &amp;&amp; rm -rf ./rvm/ &amp;&amp; git clone --depth 1 http://github.com/wayneeseguin/rvm.git &amp;&amp; cd rvm &amp;&amp; ./install

%h3 2. Installing / updating the latest rvm from the latest source tarball

%p
  To instead install the latest fixed release, you can run:

= sh_cmd "bash <(curl http://rvm.beginrescueend.com/releases/rvm-install-latest)"

%p
  Or, if you wish to let rvm attempt to automatically set up your profiles for you,
  
= sh_cmd "bash <(curl http://rvm.beginrescueend.com/releases/rvm-install-latest) --auto"
  
%p
  What this script essentially does is the following, with some extra checks and tweaks:
%pre.code
  :preserve
    version=$(curl http://rvm.beginrescueend.com/releases/stable-version.txt);
    mkdir -p ~/.rvm/src/ &amp;&amp; cd ~/.rvm/src/ &amp;&amp; curl -O http://rvm.beginrescueend.com/releases/rvm-${version}.tar.gz | tar zxf - &amp;&amp; cd rvm-${version} &amp;&amp; ./install

%h3 3. Installing from a gem (not recommended)

%p
  Although we suggest installing the rvm gem for the ruby api part of rvm, we discourage the use of
  it for actually installing rvm itself - this primarily being since rvm updates are typically done
  via:

= sh_cmd "rvm update"

%p
  Versus the gem alternative of:

= sh_cmd "gem update rvm && rvm-install"

%p
  Meaning the gem version and the rvm version may both differ greatly. Also, installing as a gem requires
  you use an existing ruby. For the few cases where you must use a gem, you can simply do "gem install rvm"
  followed by running the rvm-install binary:

%pre.code
  :preserve
    ∴ gem install rvm                 # Install the RVM gem
    # Adjust the path below for whever your system gem bin directory is located
    ∴ ~/.gem/ruby/1.8/bin/rvm-install # Install RVM, adds hooks for bash & zsh
    
%p
  If you wish to let rvm attempt to automatically setup your profile, pass the
  \--auto flag to you rvm-install, like so:
  
= sh_cmd "~/.gems/ruby/1.8/bin/rvm-install --auto"

%p
  If rvm-install is not found at the path listed it is likely because your users gem home is not in your path.
  You can find out the path to use by running
  
= sh_cmd "gem env gemdir"

%p
  This will show something like /Users/wayne/.gem/ruby/1.8

%h2 Post Install

%p
  The first time you install RVM, you must put the following line into your profile at the very end, after all path loads etc:
%pre.code
  :preserve
    [[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; source "$HOME/.rvm/scripts/rvm"
%p
  Doing so ensures rvm as loaded as a function (versus as a binary), ensuring commands such as rvm use work as expected. Please note that
  you can confirm this worked correctly by opening a new shell and running:

= sh_cmd "type rvm | head -n1"

%p If this was performed correctly, you should see:

%pre.code
  :preserve
    rvm is a function

%p
  Next, you can manually load the new code into your current shell and start using RVM ! w00t!

= sh_cmd "source ~/.rvm/scripts/rvm"

%p
  Be sure to install any dependencies for your operating system by running:

= sh_cmd "rvm notes"

%p
  The following script will boostrap git + RVM assuming that you have curl &amp; sudo installed.
  It will also install (last line) several common rubies.

%pre.code
  :preserve
    #!/usr/bin/env bash

    # Install git
    mkdir -p $HOME/.rvm/src &amp;&amp; cd $HOME/.rvm/src &amp;&amp; version=1.7.1.1
    curl -O http://kernel.org/pub/software/scm/git/git-$version.tar.gz; tar xzf git-$version.tar.gz
    cd git-$version &amp;&amp; ./configure --prefix=/usr/local &amp;&amp; make &amp;&amp; sudo make install

    # Install RVM
    bash &lt; &lt;( curl http://rvm.beginrescueend.com/releases/rvm-install-head )

    # Install some rubies
    source "$HOME/.rvm/scripts/rvm"
    rvm install ree,1.9.2-head,jruby

%h2 Troubleshooting your Install
%ul
  %li
    %p If you open a new shell and running:
    = sh_cmd "type rvm | head -n1"
    %p does not show "rvm is a function", rvm isn't being sourced correctly.
  %li
    %p
      Do NOT 'return' from inside the .bashrc file or else RVM will be prevented from working properly -
      That is to say, if your .bashrc contains "&& return", e.g, ubuntu in particular has
    %pre.code
      :preserve
        [ -z "$PS1" ] && return
    %p you'll need to convert it into an if statement - e.g, in this case we change the given line into
    %pre.code
      :preserve
        if [[ -n "$PS1" ]]; then
    %p
      indent everything below it one level and then add a trailing "fi" on a new line. Once that is done,
      we add the source line as noted above
      %em after
      the fi you added. E.g, this:
    %pre.code
      :preserve
        [ -z "$PS1" ] && return
        # Some code here... e.g.
        export HISTCONTROL=ignoreboth
    %p would become:
    %pre.code
      :preserve
        if [[ -n "$PS1" ]]; then
          # Some code here... e.g.
          export HISTCONTROL=ignoreboth
        fi
        [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
        
  %li
    %p
      Ensure that rvm is the last thing sourced in all of your shell profiles - e.g. it is sourced in the
      user specific profile after any environment variables,
      %em especially PATH
      are set. Otherwise, the values you set be trampled when you switch rubies.